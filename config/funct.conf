function genDaemon() {
  echo "Membuat docker daemon"
  echo -e "[Unit]\nDescription=Docker Application Container Engine\nDocumentation=https://docs.docker.com\nAfter=network-online.target docker.socket firewalld.service containerd.service time-set.target\nWants=network-online.target containerd.service\nRequires=docker.socket\n\n[Service]\nType=notify\nExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock\nExecReload=/bin/kill -s HUP $MAINPID\nTimeoutStartSec=0\nRestartSec=2\nRestart=always\nStartLimitBurst=3\nStartLimitInterval=60s\nLimitNPROC=infinity\nLimitCORE=infinity\nTasksMax=infinity\nDelegate=yes\nKillMode=process\nOOMScoreAdjust=-500\n\n[Install]\nWantedBy=multi-user.target" > /etc/systemd/system/docker.service
  echo -e "[Unit]\nDescription=Docker Socket for the API\nPartOf=docker.service\n\n[Socket]\nListenStream=/var/run/docker.sock\nSocketMode=0660\nSocketUser=root\nSocketGroup=docker\n\n[Install]\nWantedBy=sockets.target" > /usr/lib/systemd/system/docker.socket
  sudo systemctl enable docker &> /dev/null
  sudo systemctl daemon-reload &> /dev/null
  echo "Menjalankan docker daemon"
  systemctl start docker.socket &> /dev/null
  sudo systemctl restart docker &> /dev/null
}

function stopDocker() {
  ps aux | grep docker | awk '{ print $2 }' | xargs -I % sudo kill -9 % &> /dev/null
}

function setup() {
  sudo apt-get update -qq
  sudo apt-get install -y -qq ca-certificates curl
  sudo install -m 0755 -d /etc/apt/keyrings
}

function runDaemon() {
  echo "Menjalankan docker daemon"
  sudo systemctl start docker &> /dev/null
}

function centosDocker() {
  sudo yum install -y yum-utils &> /dev/null
  sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo &> /dev/null
  sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin &> /dev/null
  stopDocker
  runDaemon
}

function debianDocker() {
  setup
  sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
  sudo chmod a+r /etc/apt/keyrings/docker.asc
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  sudo apt-get update -qq
  stopDocker
  genDaemon
}

function fedoraDocker() {
  sudo dnf -y install dnf-plugins-core &> /dev/null
  sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo &> /dev/null
  sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin &> /dev/null
  stopDocker
  runDaemon
}

function rhelDocker() {
  sudo yum install -y yum-utils &> /dev/null
  sudo yum-config-manager --add-repo https://download.docker.com/linux/rhel/docker-ce.repo &> /dev/null
  sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin &> /dev/null
  stopDocker
  runDaemon
}

function slesDocker() {
  sudo apt-get update &> /dev/null
  sudo zypper addrepo https://download.docker.com/linux/sles/docker-ce.repo &> /dev/null
  sudo zypper install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin &> /dev/null
  stopDocker
  runDaemon
}

function ubuntuDocker() {
  setup
  sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
  sudo chmod a+r /etc/apt/keyrings/docker.asc
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$UBUNTU_CODENAME") stable" | \
    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  sudo apt-get update -qq
  stopDocker
  genDaemon
}

function raspiDocker() {
  setup
  sudo curl -fsSL https://download.docker.com/linux/raspbian/gpg -o /etc/apt/keyrings/docker.asc
  sudo chmod a+r /etc/apt/keyrings/docker.asc
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/raspbian $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  sudo apt-get update -qq
  stopDocker
  genDaemon
}

function binaryDocker() {
  local docbin="$1"
  wget https://download.docker.com/linux/static/stable/x86_64/$docbin &> /dev/null
  tar xzvf $docbin &> /dev/null
  sudo cp docker/* /usr/bin/
  rm -rf docker/*
  stopDocker
  genDaemon
}

function dockerCompose() {
  curl -SL https://github.com/docker/compose/releases/download/v2.24.7/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose &> /dev/null
  sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose 2> /dev/null
  chmod +x /usr/bin/docker-compose
}

function dockerDaemon() {
  local image="$1"
  local df="$2"
  nohup sudo dockerd > /dev/null 2>&1 &
  docker pull $image &> /dev/null
  echo "Proses Build Image"
  docker build -t $image -f $df . &> /dev/null
}

function invenCreate() {
  local mb="$1"
  local Fi="$2"
  local invenFile="$3"
  local mds="$4"
  local becomeUsr="$5"
  local passwd="$6"
  local locpy="$7"
  echo "$mb $Fi" && echo "# Modbus Server Inventory" > "$invenFile" && echo "" >> "$invenFile" && echo "[local]" >> "$invenFile" && echo "localhost ansible_connection=local" >> "$invenFile" && echo -e "\n[$mds]" >> "$invenFile" && echo "localhost ansible_user=$becomeUsr ansible_ssh_pass=$passwd" >> "$invenFile" && echo "" >> "$invenFile" && echo "[all:vars]" >> "$invenFile" && echo "ansible_python_interpreter=$locpy" >> "$invenFile" && echo "" >> "$invenFile"
}

function ansibleInstall() {
  local nm="$1"
  sudo apt-get update && sudo apt-get install -y $nm
}

function modbusCreate() {
  local mServeryml="$1"
  local mServerpy="$2"
  local mb="$3"
  local mts="$4"
  local host="$5"
  local modport="$6"
  local f="$7"
  cat <<EOL > "$mServeryml"
---
- name: Membuat $mServerpy
  hosts: local
  become: no
  become_user: "{{ ansible_user }}"

  tasks:
    - name: Menginstal paket yang dibutuhkan
      apt:
        name: "{{ item }}"
        state: present

      loop:
        - python3
        - python3-pip

    - name: $mb script untuk $mts
      copy:
        content: |
          from pyModbusTCP.server import ModbusServer, DataBank
          from random import uniform
          from time import sleep

          def main():
              server = ModbusServer(host='$host', port=$modport, no_block=True)
              try:
                  print("Menjalankan server")
                  server.start()
                  print("Server sedang berjalan pada $host:$modport")
                  dataLama = DataBank.get_words(0, 1)
                  while True:
                      DataBank.set_words(0, [int(uniform(0, 100))])
                      dataSekarang = DataBank.get_words(0, 1)
                      if dataSekarang != dataLama:
                          dataLama = dataSekarang
                          print("Data register terganti ke "+str(dataSekarang))
                      sleep(0.5)
              except Exception as e:
                  print(f"Server berhenti karena {e}")
                  server.stop()
                  print("Server berhasil diberhentikan")

          if __name__ == "__main__":
              main()
        dest: "{{ lookup('env', 'PWD') }}/$f/$mServerpy"
        mode: 0755
EOL
}

function installerHelp() {
  local modIns="$1"
  echo -e "\nInfo:"
  echo "  [ -i / --install ] - Menginstal Modbus Server"
  echo "  [ -c / --clear ]   - Menghapus Berkas Modbus Server"
  echo "  [ -h / --help ]    - Bantuan"
  echo ""
  echo "Penggunaan:"
  echo "  ./$modIns [-i/--install]"
  echo "  ./$modIns [-c/--clear]"
  echo -e "  ./$modIns [-h/--help]\n"
}

function runmodCreate() {
  local rmodServer="$1"
  local mts="$2"
  local df="$3"
  local com="$4"
  cat <<EOL > $rmodServer
---
- name: Menjalankan $mts
  hosts: local
  become: no
  become_user: "{{ ansible_user }}"

  tasks:
    - name: Build Docker Image
      ansible.builtin.docker_image:
        build:
          path: "{{ lookup('env', 'PWD') }}/docker/$df"
        name: modbus-server:latest
        pull: yes
    - name: Menjalankan Docker Compose
      community.docker.docker_compose:
        project_src: "{{ lookup('env', 'PWD') }}/docker/$com"
        state: present
EOL
}

function assistCreate() {
  local mServersh="$1"
  local invenFile="$2"
  local mServeryml="$3"
  local rcmodServer="$4"
  local rmodServer="$5"
  local smodServer="$6"
  cat <<EOL > $mServersh
if [[ -z "\$1" ]]; then
  echo ''$'\n'Untuk bantuan:$'\n'  ./$mServersh -h$'\n'  atau$'\n'  ./$mServersh --help$'\n'
elif [[ "\$1" == "run" ]] && [[ "\$2" == "--port" || "\$2" == "-p" ]]; then
  if [[ "\$#" -lt 3 ]]; then
    echo -e "\nSilahkan masukan port\n\nUntuk bantuan:\n  ./$mServersh -h\n  atau\n  ./$mServersh --help"
  elif [[ "\$#" -eq 3 ]]; then
    py="ansible-playbook -i $invenFile modbus/$mServeryml"
    cp modbus/$rmodServer modbus/$rcmodServer
    sed -i "s/port=502/port=\$3/" modbus/$rcmodServer
    rcustom="ansible-playbook -i $invenFile modbus/$rcmodServer"
    [[ "\$USER" == "root" ]] && rcustom+=" -K" && py+=" -K"
    eval "\$py" && eval "\$rcustom"
  fi
elif [[ "\$1" == "run" ]]; then
  py="ansible-playbook -i $invenFile modbus/$mServeryml"
  runstd="ansible-playbook -i $invenFile modbus/$rmodServer"
  [[ "\$USER" == "root" ]] && runstd+=" -K" && py+=" -K"
  eval "\$py" && eval "\$runstd"
elif [[ "\$1" == "stop" ]] && [[ "\$2" == "--port" || "\$2" == "-p" ]]; then
  if [[ "\$#" -lt 3 ]]; then
    echo -e "\nSilahkan masukan port\n\nUntuk bantuan:\n  ./$mServersh -h\n  atau\n  ./$mServersh --help"
  elif [[ "\$#" -eq 3 ]]; then
    cp modbus/$smodServer modbus/$smodServer
    sed -i "s/port=502/port=\$3/" modbus/$smodServer
    scustom="ansible-playbook -i $invenFile modbus/$smodServer"
    [[ "\$USER" == "root" ]] && scustom+=" -K"
    eval "\$scustom"
  fi
elif [[ "\$1" == "stop" ]]; then
  stopstd="ansible-playbook -i $invenFile modbus/$smodServer"
  [[ "\$USER" == "root" ]] && stopstd+=" -K"
  eval "\$stopstd"
elif [[ "\$1" == "--help" ]] || [[ "\$1" == "-h" ]]; then
  echo -e"\n Info:"
  echo "  [run] - Untuk run modserver"
  echo "  [run] [-p/--port] [port] - Untuk menjalankan pada port tertentu"
  echo "  [stop] - Untuk stop modserver"
  echo -e "\n\nPenggunaan:"
  echo "  $mServersh run"
  echo "  $mServersh run -p 80"
  echo "  $mServersh run --port 999"
  echo -e "  $mServersh stop\n"
fi
EOL
}

function stopmodCreate() {
  local smodServer="$1"
  local mts="$2"
  local currUser="$3"
  local mServerpy="$4"
  cat <<EOL > $smodServer
---
- name: Menghentikan $mts
  hosts: local
  become: no
  become_user: "{{ ansible_user }}"

  tasks:
    - name: Menghentikan Docker Compose
      community.docker.docker_compose:
        project_src: "/$currUser/docker"
        state: absent
        files:
          - docker-compose.yml

    - name: Menghapus File $mServerpy
      command: "rm -rf /$currUser/modbus/$mServerpy"
EOL
}

function reqCreate() {
  local req="$1"
  echo "pyModbusTCP" > $req
}

function dockerfileCreate() {
  local df="$1"
  local req="$2"
  local mServerpy="$3"
  cat <<EOL > $df
FROM python:3.10-slim-bullseye

WORKDIR /app

COPY $req .
RUN pip install --no-cache-dir -r $req

COPY modbus/$mServerpy .
EXPOSE 502

CMD ["python", "$mServerpy"]
EOL
}

function composeCreate() {
  local com="$1"
  local newport="$2"
  cat <<EOL > $com
version: '3'

services:
  modbus-server:
    build: .
    ports:
      - "$newport:502"
    restart: always
EOL
}